#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define COLEMAK 1
#define NUM_SYM 2
#define FUN     3
#define NAV     4
#define BT      5

#define COMBO_TIMEOUT 20
#define COMBO_IDLE 150
#define LONG_COMBO_TIMEOUT 100
#define TD_TIMEOUT 150
#define SHORT_TD_TIMEOUT 120
#define TAP_TIMEOUT 150
#define HM_TAP_TIMEOUT 280
#define QUICK_TAP_MS 175

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 29 30 
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 32 33

&lt {
    tapping-term-ms = <TAP_TIMEOUT>;
};

/ {
    behaviors {
        hmsk: homerow_mods_for_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow_mods_for_shift";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TIMEOUT>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <75>;
            bindings = <&sk>, <&kp>;
        };
        shift: thumb_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "thumb_shift";
            #binding-cells = <0>;
            bindings = <&lt NAV RET>, <&caps_word>;
            mods = <(MOD_RSFT)>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TIMEOUT>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <75>;
            bindings = <&kp>, <&kp>;
        };
        hmnav: homerow_mods_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods nav";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TIMEOUT>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R>;
            hold-trigger-on-release;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TIMEOUT>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <75>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R>;
            hold-trigger-on-release;
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TIMEOUT>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <75>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L>;
            hold-trigger-on-release;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_qw_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
        };
        /*
        combo_we_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        */

        combo_io_del {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <7 8>;
            bindings = <&kp LC(DEL)>;
        };
        combo_op_bspc {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <8 9>;
            bindings = <&kp LC(BSPC)>;
        };

        combo_as_save {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <10 11>;
            bindings = <&kp LC(S)>;
        };

        combo_lsemi_ret {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <18 19>;
            bindings = <&kp RET>;
        };

        combo_zx_cut {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <20 21>;
            bindings = <&kp LC(X)>;
        };
        combo_xc_copy {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
        };
        combo_cv_paste {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <22 23>;
            bindings = <&kp LC(V)>;
        };
        combo_vb_space {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_IDLE>;
            key-positions = <23 24>;
            bindings = <&lt NUM_SYM SPACE>;
        };
    };
};
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |    Q    |    W    |    E    |    R    |    T    |                |    Y    |    U    |    I    |    O    |    P    |
// |    A    |    S    |    D    |    F    |    G    |                |    H    |    J    |    K    |    L    |    ;    |
// |    Z    |    X    |    C    |    V    |    B    |                |    N    |    M    |    ,    |    .    |    /    |
//         |   SHIFT  |  SPACE  | LEFT  |  RIGHT  | RESET  |        |  RETURN |  RESET  |
            bindings = <
    &lt NAV Q    &kp W        &kp E        &kp R        &kp T      &kp Y       &kp U        &kp I        &kp O          &kp P
    &kp A        &hml LSHFT S &hml LALT D  &hml LCTRL F &kp G      &kp H       &hmr RCTRL J &hm RALT K   &hmr RSHFT L   &hmr RGUI SEMI
    &hm LSHFT Z  &lt FUN X    &kp C        &kp V        &kp B      &lt FUN N   &kp M        &kp COMMA    &hmr RSHFT DOT 
                &bootloader  &lt NUM_SYM SPACE &kp BSPC     &lt NAV RET &lt FUN FSLH
            >;
        };

        colemak_layer {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |    Q    |    W    |    F    |    P    |    B    |                |    J    |    L    |    U    |    Y    |    ;    |
// |    A    |    R    |    S    |    T    |    G    |                |    M    |    N    |    E    |    I    |    O    |
// |    Z    |    X    |    C    |    D    |    V    |                |    K    |    H    |    ,    |    .    |    /    |
//         |   SHIFT  |  SPACE  | LEFT  |  RIGHT  | RESET  |        |  RETURN |  RESET  |
            bindings = <
    &lt NAV Q    &kp W        &kp F        &kp P        &kp B                         &kp J   &kp L        &kp U        &kp Y          &kp SEMI
    &kp A        &hml LSHFT R &hml LALT S  &hml LCTRL T &kp G                         &kp M   &hmr RCTRL N &hm RALT E   &hmr RSHFT I   &hmr RGUI O
    &hm LSHFT Z  &lt FUN X    &kp C        &kp D        &kp V                         &kp K   &kp H        &kp COMMA    &hm RSHFT DOT  
                &bootloader  &lt NUM_SYM SPACE &kp BSPC     &lt NAV RET &lt FUN FSLH
            >;
        };
        
        num_sym {
            bindings = <
    &lt NAV N1    &kp N2           &kp N3        &kp N4         &kp N5               &kp N6    &kp N7         &kp N8        &kp N9          &kp N0
    &kp DQT       &hm LSHFT SQT &hm LALT LPAR &hm LCTRL RPAR &kp GRAVE            &kp MINUS &hm RCTRL LBRC &hm LALT RBRC &hm RSHFT EQUAL &trans
    &kp BSLH      &trans           &kp LBKT      &kp RBKT       &kp UNDER            &kp PLUS  &kp MINUS      &trans        &trans          
                &trans      &trans             &trans   &trans &trans  
            >;
        };
        
        fun {
            bindings = <
    &trans &trans &trans &trans &trans          &kp F1  &kp F2        &kp F3       &kp F4           &kp F5
    &trans &trans &trans &trans &trans          &kp F6  &hmr RCTRL F7 &hmr LALT F8 &hmr RSHFT F9    &hmr RGUI F10
    &trans &trans &trans &trans &kp INS         &kp F11 &kp F12       &kp PSCRN    &kp PAUSE_BREAK  
       &trans &trans &trans       &trans  &none
            >;
        };

        nav {
            bindings = <
    &kp ESC  &kp TAB               &kp LS(TAB) &kp K_APP    &kp ESC         &none    &kp LC(LEFT) &kp UP    &kp LC(RIGHT) &kp BSPC
    &kp LGUI &hmnav LSHFT LS(TAB)  &kp LALT    &kp LCTRL    &none           &none    &kp LEFT     &kp DOWN  &kp RIGHT     &hm RGUI DEL
    &mo BT   &tog COLEMAK          &none       &none        &none               &kp HOME     &kp END   &kp PG_UP     &kp PG_DN
      &trans   &trans    &trans      &trans       &trans      
            >;
        };
 
        bt {
            bindings = <
    &bt BT_SEL 0 &bt BT_SEL 1    &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4         &rgb_ug RGB_TOG  &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_BRD &bt BT_CLR
    &out OUT_USB &out OUT_BLE    &bt BT_CLR   &none        &none                &rgb_ug RGB_COLOR_HSB(139, 100, 39)  &rgb_ug RGB_HUI &rgb_ug RGB_SAD &rgb_ug RGB_HUD &none
    &none        &studio_unlock  &none  &none        &none                &rgb_ug RGB_EFF  &rgb_ug RGB_EFR &rgb_ug RGB_SPI &rgb_ug RGB_SPD
      &bootloader  &sys_reset       &none        &none        &none         
            >;
        };

    };
};
